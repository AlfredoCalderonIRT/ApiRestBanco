package com.mx.ApiRestBanco.ApiRestBanco.model;

import java.sql.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/*
   create table clientes (
   id          number
      generated by default on null as identity
   primary key,
   num_cliente int not null,
   nombre      varchar2(80) not null,
   app         varchar(80) not null,
   apm         varchar2(80),
   correo      varchar2(70) not null,
   fecha_nacim date not null
);
 */

//Mapeo de tabla

@Entity
@Table(name="CLIENTES")
@NoArgsConstructor // ? Este estereotipo nos genera un constructor vacio
@AllArgsConstructor // ? Este estereotipo nos genera un constructor con todos los datos
@Data // ? El estereotipo Data contiene diferentes metodos, como el toString, el encapsulamiento y demas
public class Clientes {

   /* 
  @Column(name="NUM_CLIENTE") // Este tipo de mapeo es el mas usado en el campo laboral
   private int numCliente;

   @SuppressWarnings("unused")
   private String nombre;
   */


   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY) // ! este estereotipo indica que el valor de la columna se generara automaticamente

   @Column(name="ID",columnDefinition = "NUMBER",nullable = false)
   private Long idCliente;

   @Column(name="NUM_CLIENTE",columnDefinition = "NUMBER",nullable = false)
   private Integer numCliente;

   @Column(name="NOMBRE",columnDefinition = "VARCHAR2(80)",nullable = false)
   private String nombre;

   @Column(name="APP",columnDefinition = "VARCHAR2(80)",nullable = false)
   private String app; 

   @Column(name="APM",columnDefinition = "VARCHAR2(80)",nullable = true)
   private String apm;

   @Column(name="CORREO",columnDefinition = "VARCHAR2(70)",nullable = false)
   private String correo; 

   @Column(name="FECHA_NACIM",columnDefinition = "DATE",nullable = false)
   private Date fechaNacim;

   // ? Los tipo de datos primitivos de preferencia se tienen que parsear -- casteo









   


}
